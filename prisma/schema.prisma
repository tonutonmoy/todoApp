generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Gender {
  MALE
  FEMALE
  OTHER
  MIXED
  ANY
}

enum RequestStatus {
  PENDING
  ACCEPTED
  REJECTED
  CANCELLED
  EXPIRED
}

enum ListingStatus {
  PUBLISHED
  EXPIRED
}

enum UserRoleEnum {
  USER
  SUPERADMIN
}

enum ProductStatus {
  ACTIVE
  INACTIVE
}

enum UserStatus {
  ACTIVE
  INACTIVE
  BLOCKED
}

model User {
  id                            String       @id @default(auto()) @map("_id") @db.ObjectId
  firstName                     String
  lastName                      String
  surname                       String?
  email                         String       @unique
  password                      String
  role                          UserRoleEnum @default(USER)
  status                        UserStatus   @default(ACTIVE)
  otp                           String?
  otpExpiry                     DateTime?
  isEmailVerified               Boolean      @default(true)
  rememberMe                    Boolean?     @default(true)
  emailVerificationToken        String?
  emailVerificationTokenExpires DateTime?
  birthDate                     DateTime?
  gender                        Gender?
  language                      String?
  school                        String?
  profilePicture                String?
  biography                     String?
  aboutMe                       String[]
  instagram                     String?
  phoneNumber                   String?
  createdAt                     DateTime     @default(now())
  updatedAt                     DateTime     @updatedAt
  termsAndConditions            Boolean?
  bio                           String?

  roomMateListing      RoomMateListing[]
  requestsSent  Request[]
  roommates     Roommate[]
  savedListings Saved[]
  userInterests UserInterest[]
}

model Interest {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  name          String         @unique
  userInterests UserInterest[]
}

model UserInterest {
  id         String @id @default(auto()) @map("_id") @db.ObjectId
  userId     String @db.ObjectId
  interestId String @db.ObjectId

  user     User     @relation(fields: [userId], references: [id])
  interest Interest @relation(fields: [interestId], references: [id])
}

model RoomMateListing {
  id                            String        @id @default(auto()) @map("_id") @db.ObjectId
  title                         String?
  preview                       String?
  description                   String?
  rentCHF                       Int?
  expensesIncluded              Boolean?       @default(true)
  extraExpenses                 String[]
  availableFrom                 DateTime?
  availableUntil                DateTime?
  rooms                         Float?
  bathrooms                     Int?
  size                          Int?
  floor                         Int?
  address                       String?
  streetAndNo                   String?
  postalCode                    String?
  city                          String?
  latitude                      Float?
  longitude                     Float?
  radiusKm                      Int?
  photos                        String[]
  videoUrl                      String?
  status                        ListingStatus? @default(PUBLISHED)
  createdAt                     DateTime?      @default(now())
  expiresAt                     DateTime?
  available                     String?
  additionalExpenseIncluded     Boolean?
  roommateAgeMin                Int?
  roommateAgeMax                Int?
  roommateLanguages             String[]
  roommateGender                Gender?
  spaceAndAppliances            String[]
  comfortAndLeisure             String[]
  accessAndMobility             String[]
  houseAtmosphere               String?
  externalGuestsAllowed         String?
  smokingAllowedInOutdoorAreas  String?
  currentlyHavePets             String?
  newPetsAllowed                String?
  cookingWithRoommates          String?
  dinnerWithRoommates           String?
  language                      String?
  age                           String?

  // Relations
  manualRooms      AddRoomet[]      @relation("RoomMateListingToManualRooms")
  ownerId          String           @db.ObjectId
  owner            User             @relation(fields: [ownerId], references: [id])
  roommates        Roommate[]
  requests         Request[]
  savedBy          Saved[]
  listingAmenities ListingAmenity[]
  listingRules     ListingRule[]
}

model AddRoomet {
  id        String          @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  email     String          @unique
  listingId String          @db.ObjectId
  listing   RoomMateListing @relation("RoomMateListingToManualRooms", fields: [listingId], references: [id])
}

model Amenity {
  id               String           @id @default(auto()) @map("_id") @db.ObjectId
  name             String           @unique
  listingAmenities ListingAmenity[]
}

model ListingAmenity {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  listingId String @db.ObjectId
  amenityId String @db.ObjectId

  listing RoomMateListing @relation(fields: [listingId], references: [id])
  amenity Amenity         @relation(fields: [amenityId], references: [id])
}

model LifestyleRule {
  id           String        @id @default(auto()) @map("_id") @db.ObjectId
  name         String        @unique
  listingRules ListingRule[]
}

model ListingRule {
  id              String @id @default(auto()) @map("_id") @db.ObjectId
  listingId       String @db.ObjectId
  lifestyleRuleId String @db.ObjectId

  listing       RoomMateListing @relation(fields: [listingId], references: [id])
  lifestyleRule LifestyleRule   @relation(fields: [lifestyleRuleId], references: [id])
}

model Roommate {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  userId    String  @db.ObjectId
  listingId String  @db.ObjectId
  isLeaving Boolean @default(false)

  user    User            @relation(fields: [userId], references: [id])
  listing RoomMateListing @relation(fields: [listingId], references: [id])
}

model Request {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  listingId   String        @db.ObjectId
  senderId    String        @db.ObjectId
  status      RequestStatus @default(PENDING)
  createdAt   DateTime      @default(now())
  respondedAt DateTime?

  listing RoomMateListing @relation(fields: [listingId], references: [id])
  sender  User            @relation(fields: [senderId], references: [id])
}

model Saved {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  userId    String @db.ObjectId
  listingId String @db.ObjectId

  user    User            @relation(fields: [userId], references: [id])
  listing RoomMateListing @relation(fields: [listingId], references: [id])
}
